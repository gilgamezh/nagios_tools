#!/usr/bin/env python2

import sys
import argparse
from urllib import urlopen

STATE_OK = 0
STATE_WARNING = 1
STATE_CRITICAL = 2
STATE_UNKNOWN = 3
STATE_DEPENDENT = 4


def pull_graphite_data(url):
    """Pull down raw data from Graphite"""
    # Make sure the url ends with '&rawData'
    if not url.endswith('&rawData'):
        url = url + '&rawData'
    data = urlopen(url).read()
    return data


def eval_graphite_data(data, seconds):
    """Get the most recent correct value from the data"""

    sample_period = int(data.split('|')[0].split(',')[-1])
    all_data_points = data.split('|')[-1].split(',')

    # Evaluate what graphite returned, should either be a float, or None
    # First, if the number of seconds of data we want to examine is smaller or
    # equals the graphite sample period, just grab the latest data point.
    # If that data point is None, grab the one before it.
    # If that is None too, return 0.0.
    if seconds <= sample_period:
        if all_data_points[-1] != "None":
            data_value = float(all_data_points[-1])
        elif all_data_points[-2] != "None":
            data_value = float(all_data_points[-2])
        else:
            data_value = 0.0
    else:
    # Second, if we requested more than on graphite sample period, work out how
    # many sample periods we wanted (python always rounds division *down*)
        data_points = (seconds/sample_period)
        data_set = [float(x) for x in all_data_points[-data_points:]
                    if x != "None"]

        if data_set:
            data_value = float(sum(data_set) / len(data_set))
        else:
            data_value = 0.0
    return data_value


def get_hw_value(url, seconds=0):
    """Get the Holt-Winters value from a Graphite graph"""

    data = pull_graphite_data(url)
    for line in data.split():
        if line.startswith('holtWintersConfidenceUpper'):
            graphite_upper = eval_graphite_data(line, seconds)
        elif line.startswith('holtWintersConfidenceLower'):
            graphite_lower = eval_graphite_data(line, seconds)
        else:
            graphite_data = eval_graphite_data(line, seconds)

    return graphite_data, graphite_lower, graphite_upper


def get_value(url, seconds=0):
    """Get the value from a Graphite graph"""

    data = pull_graphite_data(url)
    data_value = eval_graphite_data(data, seconds)
    return data_value

def main():
    parser = argparse.ArgumentParser(
        description="Alert on data, based on number from Graphite.")

    parser.add_argument("url", help="Graphite metric URL")

    parser.add_argument("--warning", "-w", default=None, type=int,
                        help="Warning threshold", required=True)
    parser.add_argument("--critical", "-c", default=None, type=int,
                        help="Critical threshold", required=True)
    parser.add_argument("--reverse", "-r", action="store_true",
                        help="Reverse - Alert when the value is UNDER"
                        "warning/critical instead of OVER")
    parser.add_argument("--secs", "-s", default=0, type=int,
                        help="Average over the last N seconds of data")

    args = parser.parse_args()

    url = args.url
    warning_th = args.warning
    critical_th = args.critical
    reverse = args.reverse
    seconds = args.secs

    graphite_data = get_value(url, seconds)

    print('Current value: %s, warn threshold: %s, crit threshold: %s' % \
           (graphite_data, warning_th, critical_th))

    if reverse == True:
        if critical_th >= graphite_data:
            sys.exit(STATE_CRITICAL)
        elif warning_th >= graphite_data:
            sys.exit(STATE_WARNING)
        else:
            sys.exit(STATE_OK)
    else:
        if graphite_data >= critical_th:
            sys.exit(STATE_CRITICAL)
        elif graphite_data >= warning_th:
            sys.exit(STATE_WARNING)
        else:
            sys.exit(STATE_OK)


if __name__ == '__main__':
    main()
